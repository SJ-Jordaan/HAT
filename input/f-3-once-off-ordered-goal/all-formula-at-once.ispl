Semantics = SingleAssignment;

Agent Environment
	Vars:
		r1: {none,a1,a2};
		r2: {none,a2};
		r3: {none,a1,a2,a3};
		r4: {none,a1,a3};
		r5: {none,a1,a3,a4};
		r6: {none,a5};
		r7: {none,a1,a4};
		r8: {none,a1,a2,a5};
	end Vars
	Actions = {none};
	Protocol:
		Other: {none};
	end Protocol
	Evolution:
		r1 = a1 if (r1=none and a1.Action=req_r1 and !(a2.Action=req_r1));
		r1 = none if (r1 = a1 and a1.Action = rel_r1);
		r1 = none if (r1 = a1 and a1.Action = relall);

		r1 = a2 if (r1=none and a2.Action=req_r1 and !(a1.Action=req_r1));
		r1 = none if (r1 = a2 and a2.Action = rel_r1);
		r1 = none if (r1 = a2 and a2.Action = relall);

		r2 = a2 if (r2=none and a2.Action=req_r2);
		r2 = none if (r2 = a2 and a2.Action = rel_r2);
		r2 = none if (r2 = a2 and a2.Action = relall);

		r3 = a1 if (r3=none and a1.Action=req_r3 and !(a2.Action=req_r3) and !(a3.Action=req_r3));
		r3 = none if (r3 = a1 and a1.Action = rel_r3);
		r3 = none if (r3 = a1 and a1.Action = relall);

		r3 = a2 if (r3=none and a2.Action=req_r3 and !(a1.Action=req_r3) and !(a3.Action=req_r3));
		r3 = none if (r3 = a2 and a2.Action = rel_r3);
		r3 = none if (r3 = a2 and a2.Action = relall);

		r3 = a3 if (r3=none and a3.Action=req_r3 and !(a1.Action=req_r3) and !(a2.Action=req_r3));
		r3 = none if (r3 = a3 and a3.Action = rel_r3);
		r3 = none if (r3 = a3 and a3.Action = relall);

		r4 = a1 if (r4=none and a1.Action=req_r4 and !(a3.Action=req_r4));
		r4 = none if (r4 = a1 and a1.Action = rel_r4);
		r4 = none if (r4 = a1 and a1.Action = relall);

		r4 = a3 if (r4=none and a3.Action=req_r4 and !(a1.Action=req_r4));
		r4 = none if (r4 = a3 and a3.Action = rel_r4);
		r4 = none if (r4 = a3 and a3.Action = relall);

		r5 = a1 if (r5=none and a1.Action=req_r5 and !(a3.Action=req_r5) and !(a4.Action=req_r5));
		r5 = none if (r5 = a1 and a1.Action = rel_r5);
		r5 = none if (r5 = a1 and a1.Action = relall);

		r5 = a3 if (r5=none and a3.Action=req_r5 and !(a1.Action=req_r5) and !(a4.Action=req_r5));
		r5 = none if (r5 = a3 and a3.Action = rel_r5);
		r5 = none if (r5 = a3 and a3.Action = relall);

		r5 = a4 if (r5=none and a4.Action=req_r5 and !(a1.Action=req_r5) and !(a3.Action=req_r5));
		r5 = none if (r5 = a4 and a4.Action = rel_r5);
		r5 = none if (r5 = a4 and a4.Action = relall);

		r6 = a5 if (r6=none and a5.Action=req_r6);
		r6 = none if (r6 = a5 and a5.Action = rel_r6);
		r6 = none if (r6 = a5 and a5.Action = relall);

		r7 = a1 if (r7=none and a1.Action=req_r7 and !(a4.Action=req_r7));
		r7 = none if (r7 = a1 and a1.Action = rel_r7);
		r7 = none if (r7 = a1 and a1.Action = relall);

		r7 = a4 if (r7=none and a4.Action=req_r7 and !(a1.Action=req_r7));
		r7 = none if (r7 = a4 and a4.Action = rel_r7);
		r7 = none if (r7 = a4 and a4.Action = relall);

		r8 = a1 if (r8=none and a1.Action=req_r8 and !(a2.Action=req_r8) and !(a5.Action=req_r8));
		r8 = none if (r8 = a1 and a1.Action = rel_r8);
		r8 = none if (r8 = a1 and a1.Action = relall);

		r8 = a2 if (r8=none and a2.Action=req_r8 and !(a1.Action=req_r8) and !(a5.Action=req_r8));
		r8 = none if (r8 = a2 and a2.Action = rel_r8);
		r8 = none if (r8 = a2 and a2.Action = relall);

		r8 = a5 if (r8=none and a5.Action=req_r8 and !(a1.Action=req_r8) and !(a2.Action=req_r8));
		r8 = none if (r8 = a5 and a5.Action = rel_r8);
		r8 = none if (r8 = a5 and a5.Action = relall);

	end Evolution
end Agent

Agent a1
	Lobsvars = {r5,r8,r1,r4,r7,r3};
	Vars:
		rem : 0..2;
	end Vars
	Actions = {req_r5,rel_r5,req_r8,rel_r8,req_r1,rel_r1,req_r4,rel_r4,req_r7,rel_r7,req_r3,rel_r3,relall,idle};
	Protocol:
		rem = 0 : {relall};
		rem > 0 : {idle};
		rem > 0 and Environment.r5 = none : {req_r5};
		rem > 0 and Environment.r5 = a1 : {rel_r5};
		rem > 0 and Environment.r8 = none : {req_r8};
		rem > 0 and Environment.r8 = a1 : {rel_r8};
		rem > 0 and Environment.r1 = none : {req_r1};
		rem > 0 and Environment.r1 = a1 : {rel_r1};
		rem > 0 and Environment.r4 = none : {req_r4};
		rem > 0 and Environment.r4 = a1 : {rel_r4};
		rem > 0 and Environment.r7 = none : {req_r7};
		rem > 0 and Environment.r7 = a1 : {rel_r7};
		rem > 0 and Environment.r3 = none : {req_r3};
		rem > 0 and Environment.r3 = a1 : {rel_r3};
	end Protocol
	Evolution:
		rem = rem - 1 if (Action = req_r5 and Environment.r5 = none and !(a3.Action=req_r5) and !(a4.Action=req_r5));
		rem = rem + 1 if (Action = rel_r5);
		rem = 2 if (Action = relall);

		rem = rem - 1 if (Action = req_r8 and Environment.r8 = none and !(a2.Action=req_r8) and !(a5.Action=req_r8));
		rem = rem + 1 if (Action = rel_r8);
		rem = 2 if (Action = relall);

		rem = rem - 1 if (Action = req_r1 and Environment.r1 = none and !(a2.Action=req_r1));
		rem = rem + 1 if (Action = rel_r1);
		rem = 2 if (Action = relall);

		rem = rem - 1 if (Action = req_r4 and Environment.r4 = none and !(a3.Action=req_r4));
		rem = rem + 1 if (Action = rel_r4);
		rem = 2 if (Action = relall);

		rem = rem - 1 if (Action = req_r7 and Environment.r7 = none and !(a4.Action=req_r7));
		rem = rem + 1 if (Action = rel_r7);
		rem = 2 if (Action = relall);

		rem = rem - 1 if (Action = req_r3 and Environment.r3 = none and !(a2.Action=req_r3) and !(a3.Action=req_r3));
		rem = rem + 1 if (Action = rel_r3);
		rem = 2 if (Action = relall);

	end Evolution
end Agent

Agent a2
	Lobsvars = {r1,r2,r3,r8};
	Vars:
		rem : 0..2;
	end Vars
	Actions = {req_r1,rel_r1,req_r2,rel_r2,req_r3,rel_r3,req_r8,rel_r8,relall,idle};
	Protocol:
		rem = 0 : {relall};
		rem > 0 : {idle};
		rem > 0 and Environment.r1 = none : {req_r1};
		rem > 0 and Environment.r1 = a2 : {rel_r1};
		rem > 0 and Environment.r2 = none : {req_r2};
		rem > 0 and Environment.r2 = a2 : {rel_r2};
		rem > 0 and Environment.r3 = none : {req_r3};
		rem > 0 and Environment.r3 = a2 : {rel_r3};
		rem > 0 and Environment.r8 = none : {req_r8};
		rem > 0 and Environment.r8 = a2 : {rel_r8};
	end Protocol
	Evolution:
		rem = rem - 1 if (Action = req_r1 and Environment.r1 = none and !(a1.Action=req_r1));
		rem = rem + 1 if (Action = rel_r1);
		rem = 2 if (Action = relall);

		rem = rem - 1 if (Action = req_r2 and Environment.r2 = none);
		rem = rem + 1 if (Action = rel_r2);
		rem = 2 if (Action = relall);

		rem = rem - 1 if (Action = req_r3 and Environment.r3 = none and !(a1.Action=req_r3) and !(a3.Action=req_r3));
		rem = rem + 1 if (Action = rel_r3);
		rem = 2 if (Action = relall);

		rem = rem - 1 if (Action = req_r8 and Environment.r8 = none and !(a1.Action=req_r8) and !(a5.Action=req_r8));
		rem = rem + 1 if (Action = rel_r8);
		rem = 2 if (Action = relall);

	end Evolution
end Agent

Agent a3
	Lobsvars = {r4,r3,r5};
	Vars:
		rem : 0..1;
	end Vars
	Actions = {req_r4,rel_r4,req_r3,rel_r3,req_r5,rel_r5,relall,idle};
	Protocol:
		rem = 0 : {relall};
		rem > 0 : {idle};
		rem > 0 and Environment.r4 = none : {req_r4};
		rem > 0 and Environment.r4 = a3 : {rel_r4};
		rem > 0 and Environment.r3 = none : {req_r3};
		rem > 0 and Environment.r3 = a3 : {rel_r3};
		rem > 0 and Environment.r5 = none : {req_r5};
		rem > 0 and Environment.r5 = a3 : {rel_r5};
	end Protocol
	Evolution:
		rem = rem - 1 if (Action = req_r4 and Environment.r4 = none and !(a1.Action=req_r4));
		rem = rem + 1 if (Action = rel_r4);
		rem = 1 if (Action = relall);

		rem = rem - 1 if (Action = req_r3 and Environment.r3 = none and !(a1.Action=req_r3) and !(a2.Action=req_r3));
		rem = rem + 1 if (Action = rel_r3);
		rem = 1 if (Action = relall);

		rem = rem - 1 if (Action = req_r5 and Environment.r5 = none and !(a1.Action=req_r5) and !(a4.Action=req_r5));
		rem = rem + 1 if (Action = rel_r5);
		rem = 1 if (Action = relall);

	end Evolution
end Agent

Agent a4
	Lobsvars = {r7,r5};
	Vars:
		rem : 0..1;
	end Vars
	Actions = {req_r7,rel_r7,req_r5,rel_r5,relall,idle};
	Protocol:
		rem = 0 : {relall};
		rem > 0 : {idle};
		rem > 0 and Environment.r7 = none : {req_r7};
		rem > 0 and Environment.r7 = a4 : {rel_r7};
		rem > 0 and Environment.r5 = none : {req_r5};
		rem > 0 and Environment.r5 = a4 : {rel_r5};
	end Protocol
	Evolution:
		rem = rem - 1 if (Action = req_r7 and Environment.r7 = none and !(a1.Action=req_r7));
		rem = rem + 1 if (Action = rel_r7);
		rem = 1 if (Action = relall);

		rem = rem - 1 if (Action = req_r5 and Environment.r5 = none and !(a1.Action=req_r5) and !(a3.Action=req_r5));
		rem = rem + 1 if (Action = rel_r5);
		rem = 1 if (Action = relall);

	end Evolution
end Agent

Agent a5
	Lobsvars = {r8,r6};
	Vars:
		rem : 0..2;
	end Vars
	Actions = {req_r8,rel_r8,req_r6,rel_r6,relall,idle};
	Protocol:
		rem = 0 : {relall};
		rem > 0 : {idle};
		rem > 0 and Environment.r8 = none : {req_r8};
		rem > 0 and Environment.r8 = a5 : {rel_r8};
		rem > 0 and Environment.r6 = none : {req_r6};
		rem > 0 and Environment.r6 = a5 : {rel_r6};
	end Protocol
	Evolution:
		rem = rem - 1 if (Action = req_r8 and Environment.r8 = none and !(a1.Action=req_r8) and !(a2.Action=req_r8));
		rem = rem + 1 if (Action = rel_r8);
		rem = 2 if (Action = relall);

		rem = rem - 1 if (Action = req_r6 and Environment.r6 = none);
		rem = rem + 1 if (Action = rel_r6);
		rem = 2 if (Action = relall);

	end Evolution
end Agent

Evaluation
-- ======================================================================================
-- I am not sure if this is ther correct way to accomplish this
-- ======================================================================================
	init if (
		Environment.r1 = none and
		Environment.r2 = none and
		Environment.r3 = none and
		Environment.r4 = none and
		Environment.r5 = none and
		Environment.r6 = none and
		Environment.r7 = none and
		Environment.r8 = none and
		a1.rem = 2 and
		a2.rem = 2 and
		a3.rem = 1 and
		a4.rem = 1 and
		a5.rem = 2
	);
	a1_eat if (a1.rem = 0);
	a2_eat if (a2.rem = 0);
	a3_eat if (a3.rem = 0);
	a4_eat if (a4.rem = 0);
	a5_eat if (a5.rem = 0);
end Evaluation

InitStates
	Environment.r1 = none and
	Environment.r2 = none and
	Environment.r3 = none and
	Environment.r4 = none and
	Environment.r5 = none and
	Environment.r6 = none and
	Environment.r7 = none and
	Environment.r8 = none and
	a1.rem = 2 and
	a2.rem = 2 and
	a3.rem = 1 and
	a4.rem = 1 and
	a5.rem = 2;
end InitStates

Groups
	tri = {a2, a3, a1};
end Groups

Formulae
	-- =========================================================
	-- Formula 1
	-- TRUE in 5 rounds
	-- There is a strategy where a1 reaches its goal then a3 and then
	-- a2 finally reaches its goal.
	-- Demand is 2 then 1 then 2
	-- <none;req_r1;req_r3;req_r5;idle;req_r8>
	-- <none;req_r4;idle;relall;idle;idle>
	-- <none;relall;rel_r3;idle;req_r5;idle>
	-- <none;idle;req_r1;req_r3;relall;idle>
	-- <none;req_r7;req_r2;relall;req_r7;idle>
	-- =========================================================
	--<tri>F (a1_eat and <tri>F (a3_eat and <tri>F (a2_eat)));

	-- =========================================================
	-- Formula 2
	-- TRUE in 3 rounds
	-- There is a strategy where a1 reaches its goal then a2 and then
	-- a3 finally reaches its goal.
	-- Demand is 2 then 2 then 1
	-- <none;req_r1;req_r8;req_r5;idle;req_r6>
	-- <none;req_r3;req_r2;relall;idle;idle>
	-- <none;relall;relall;req_r4;idle;idle>
	-- =========================================================
	--<tri>F (a1_eat and <tri>F (a2_eat and <tri>F (a3_eat)));

	-- =========================================================
	-- Formula 3
	-- TRUE in 5 rounds
	-- There is a strategy where a2 reaches its goal then a1 and then
	-- a3 finally reaches its goal.
	-- Demand is 2 then 2 then 1
	-- <none;req_r8;req_r2;req_r3;idle;idle>
	-- <none;rel_r8;req_r1;relall;req_r5;req_r6>
	-- <none;req_r7;relall;req_r3;relall;rel_r6>
	-- <none;req_r4;req_r8;relall;req_r5;idle>
	-- <none;relall;req_r1;req_r3;relall;idle>
	-- =========================================================
	--<tri>F (a2_eat and <tri>F (a1_eat and <tri>F (a3_eat)));

	-- =========================================================
	-- Formula 4
	-- TRUE in 4 rounds
	-- There is a strategy where a2 reaches its goal then a3 and then
	-- a1 finally reaches its goal.
	-- Demand is 2 then 1 then 2
	-- <none;req_r8;req_r2;req_r3;req_r5;idle>
	-- <none;rel_r8;req_r1;relall;relall;req_r6>
	-- <none;req_r8;relall;req_r3;req_r5;idle>
	-- <none;req_r1;idle;relall;relall;idle>
	-- =========================================================
	--<tri>F (a2_eat and <tri>F (a3_eat and <tri>F (a1_eat)));

	-- =========================================================
	-- Formula 5
	-- TRUE in 2 rounds
	-- There is a strategy where a3 reaches its goal then a1 and then
	-- a2 finally reaches its goal.
	-- Demand is 1 then 2 then 2
	-- <none;req_r3;req_r1;req_r4;req_r7;req_r8>
	-- <none;req_r5;req_r2;relall;relall;idle>
	-- =========================================================
	--<tri>F (a3_eat and <tri>F (a1_eat and <tri>F (a2_eat)));

	-- =========================================================
	-- Formula 6
	-- TRUE in 4 rounds
	-- There is a strategy where a3 reaches its goal then a2 and then
	-- a1 finally reaches its goal.
	-- Demand is 1 then 2 then 2
	-- <none;req_r8;idle;req_r4;req_r7;idle>
	-- <none;rel_r8;req_r3;relall;relall;req_r6>
	-- <none;req_r1;req_r2;idle;req_r5;rel_r6>
	-- <none;req_r7;relall;req_r4;relall;req_r6>
	-- =========================================================
	--<tri>F (a3_eat and <tri>F (a2_eat and <tri>F (a1_eat)));

	-- =========================================================
	-- Formula 7
	-- FALSE
	-- a1 then a2 then a3 try to reach their goal in that order and then
	-- at some point we return to the intial state of the environment.
	-- =========================================================
	--<tri>F (a1_eat and <tri>F (a2_eat and <tri>F (a3_eat and <tri>F (init))));

	-- =========================================================
	-- Formula 8
	-- FALSE
	-- There is no point where all 3 can eat simultaneously.
	-- Demand is 5 and there are 8 resources but there are other agents that
	-- work against them as well.
	-- =========================================================
	--<tri>F (a1_eat and a2_eat and a3_eat);

	-- =========================================================
	-- Formula 9
	-- TRUE in 2 rounds
	-- <none;req_r4;req_r1;idle;req_r5;req_r6>
	-- <none;req_r7;req_r2;idle;relall;idle>
	-- =========================================================
	--<tri>F (a1_eat and a2_eat);

	-- =========================================================
	-- Formula 10
	-- TRUE in 2 rounds
	-- <none;req_r3;req_r8;idle;req_r5;req_r6>
	-- <none;req_r7;rel_r8;req_r4;relall;idle>
	-- =========================================================
	--<tri>F (a1_eat and a3_eat);

	-- =========================================================
	-- Formula 11
	-- TRUE in 2 rounds
	-- <none;req_r7;req_r1;idle;req_r5;idle>
	-- <none;req_r8;req_r3;req_r4;relall;idle>
	-- =========================================================
	--<tri>F (a2_eat and a3_eat);

	-- =========================================================
	-- Formula 12
	-- TRUE in 2 rounds
	-- <none;req_r3;req_r1;req_r5;req_r7;idle>
	-- <none;req_r4;rel_r1;relall;relall;req_r6>
	-- =========================================================
	--<tri>F (a1_eat);

	-- =========================================================
	-- Formula 13
	-- TRUE in 2 rounds
	-- <none;req_r8;req_r1;req_r5;req_r7;idle>
	-- <none;rel_r8;req_r3;relall;relall;req_r6>
	-- =========================================================
	<tri>F (a2_eat);

	-- =========================================================
	-- Formula 14
	-- TRUE in 1 state
	-- <none;req_r8;req_r3;req_r4;idle;idle>
	-- =========================================================
	-- <tri>F (a3_eat);
	
end Formulae

